import "Governance.proto";

package i2OWater.Anapos.Governance.EnterpriseEvents.AssetDataInterpretation;

message AssetLoggedDataValidated {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 optional string firmware_version = 3; 
 required bytes log_data = 4; 
 required string log_data_format = 5; 
 repeated ValidationFailure validation_failures = 6; 
 optional string asset_reference = 7; 
 extensions 100 to 120; 
}

message AssetResetInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 optional uint32 last_reset_cause = 4;
 optional uint32 reset_counter = 5;
 optional uint32 last_fault_program_counter = 6;
 optional uint32 last_fault_subroutine_call_return_address = 7;
 extensions 100 to 120; 
}

// Deprecated
message BatterySwitchInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 required string battery_type = 4; 
 extensions 100 to 120; 
}

message AssetMeasurementsInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required string physical_channel = 3; 
 repeated FloatMeasurement measurements = 4; 
 extensions 100 to 120; 
}

message FilterBlockedInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message HitClosedEndStopInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message HitOpenEndStopInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message LowBatteryInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
  extensions 100 to 120; 
}

message ManualOverrideInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message MotorEventStreamInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2;
  repeated MotorEvent motor_events = 3; 
  extensions 100 to 120; 
}

message MotorFaultInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message OutOfMemoryInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message AssetConfigurationInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 optional string configuration_id = 3;
 repeated ChannelCalibration channel_calibrations = 4;
 optional GprsAccessPoint gprs_access_point = 5;
 extensions 100 to 120; 
}

// deprecated. use PowerSourceSwitchesInterpreted
message PowerSourceSwitchInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 required string power_source = 4; 
 extensions 100 to 120; 
}

message PowerSourceSwitchesInterpreted {
  required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
  required string asset_id = 2;
  repeated PowerSourceSwitch power_source_switches = 3;
  extensions 100 to 120;
}

message StatusAlarmInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required sfixed64 when_logged = 3; 
 extensions 100 to 120; 
}

message GsmEventsInterpreted {
  required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
  required string asset_id = 2; 
  required string modem_type = 3; 
  repeated GsmEvent gsm_events = 4; 
  extensions 100 to 120; 
}

message PumpCalibrationInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2;
 required PumpCalibrationRange p2_input = 3;
 required PumpCalibrationRange flow_input = 4;
 required PumpCalibrationRange set_point_output = 5;
 extensions 100 to 120;
}

message SetPointSignalMeasurementsInterpreted {
 required i2OWater.Anapos.Governance.EnterpriseEvent root_event = 1;
 required string asset_id = 2; 
 required string physical_channel = 3; 
 repeated FloatMeasurement measurements = 4; 
 extensions 100 to 120; 
}

// sub messages //

message PumpCalibrationRange {
 required OptionalFloat value_at_4ma = 1;
 required OptionalFloat value_at_20ma = 2;
 extensions 100 to 120; 
}

message OptionalFloat {
 required bool is_specified = 1;
 required float value = 2;
 extensions 100 to 120; 
}

message GprsAccessPoint {
  required string access_point_name = 1;
  optional string username = 2;
  optional string password = 3;
  extensions 100 to 120; 
}

message ChannelCalibration {
 required string channel = 1;
 optional FloatValue acquisition_offset = 2;
 optional FloatValue acquisition_scale = 3;
 extensions 100 to 120; 
}

message FloatValue {
 required float value = 1;
 extensions 100 to 120; 
}

message ValidationFailure { 
 required string type = 1; 
 required string reason = 2; 
 extensions 100 to 120; 
}

message FloatMeasurement {
  required sfixed64 when_measured = 1; 
  required float measurement = 2; 
  extensions 100 to 120; 
}

message MotorEvent {
  required string motor_event_type = 1;
  required sfixed64 when_logged = 2;
  required sint32 slot_count = 3;
  optional ControlLoopTargetChange control_loop_target_change = 4;
  extensions 100 to 120; 
}

message GsmEvent {
  required string gsm_event_type = 1;
  required sfixed64 when_raised = 2; 
  optional string carrier = 3; 
  optional string raw_data = 4; 
  optional int32 signal_strength = 5; 
  extensions 100 to 120; 
}

message ControlLoopTargetChange {
  required sint32 current_angle = 1;
  required sint32 target_angle = 2;
  extensions 100 to 120; 
}

message ResetInfo {
  required uint32 last_reset_cause = 1;
  required uint32 reset_counter = 2;
  required uint32 last_fault_program_counter = 3;
  required uint32 last_fault_subroutine_call_return_address = 4;
  extensions 100 to 120;
}

message PowerSourceSwitch {
  required string power_source = 1;
  required sfixed64 when_logged = 2;
  extensions 100 to 120;
}
